use crate::disasm::labels::Label;
use once_cell::sync::Lazy;
use std::collections::HashMap;

pub static N64_HW_REG_MAP: Lazy<HashMap<u32, Label>> = Lazy::new(|| {
    N64_HW_REGS
        .iter()
        .copied()
        .map(|(a, r)| (a, Label::hw(a, r)))
        .collect()
});

#[allow(clippy::unreadable_literal)]
const N64_HW_REGS: &[(u32, &str)] = &[
    (0xA3F00000, "RDRAM_CONFIG_REG__RDRAM_DEVICE_TYPE_REG"),
    (0xA3F00004, "RDRAM_DEVICE_ID_REG"),
    (0xA3F00008, "RDRAM_DELAY_REG"),
    (0xA3F0000C, "RDRAM_MODE_REG"),
    (0xA3F00010, "RDRAM_REF_INTERVAL_REG"),
    (0xA3F00014, "RDRAM_REF_ROW_REG"),
    (0xA3F00018, "RDRAM_RAS_INTERVAL_REG"),
    (0xA3F0001C, "RDRAM_MIN_INTERVAL_REG"),
    (0xA3F00020, "RDRAM_ADDR_SELECT_REG"),
    (0xA3F00024, "RDRAM_DEVICE_MANUF_REG"),
    (0xA4040000, "SP_MEM_ADDR_REG"),
    (0xA4040004, "SP_DRAM_ADDR_REG"),
    (0xA4040008, "SP_RD_LEN_REG"),
    (0xA404000C, "SP_WR_LEN_REG"),
    (0xA4040010, "SP_STATUS_REG"),
    (0xA4040014, "SP_DMA_FULL_REG"),
    (0xA4040018, "SP_DMA_BUSY_REG"),
    (0xA404001C, "SP_SEMAPHORE_REG"),
    (0xA4080000, "SP_PC"),
    (0xA4100000, "DPC_START_REG"),
    (0xA4100004, "DPC_END_REG"),
    (0xA4100008, "DPC_CURRENT_REG"),
    (0xA410000C, "DPC_STATUS_REG"),
    (0xA4100010, "DPC_CLOCK_REG"),
    (0xA4100014, "DPC_BUFBUSY_REG"),
    (0xA4100018, "DPC_PIPEBUSY_REG"),
    (0xA410001C, "DPC_TMEM_REG"),
    (0xA4300000, "MI_INIT_MODE_REG__MI_MODE_REG"),
    (0xA4300004, "MI_VERSION_REG__MI_NOOP_REG"),
    (0xA4300008, "MI_INTR_REG"),
    (0xA430000C, "MI_INTR_MASK_REG"),
    (0xA4400000, "VI_STATUS_REG__VI_CONTROL_REG"),
    (0xA4400004, "VI_ORIGIN_REG__VI_DRAM_ADDR_REG"),
    (0xA4400008, "VI_WIDTH_REG__VI_H_WIDTH_REG"),
    (0xA440000C, "VI_INTR_REG__VI_V_INTR_REG"),
    (0xA4400010, "VI_CURRENT_REG__VI_V_CURRENT_LINE_REG"),
    (0xA4400014, "VI_BURST_REG__VI_TIMING_REG"),
    (0xA4400018, "VI_V_SYNC_REG"),
    (0xA440001C, "VI_H_SYNC_REG"),
    (0xA4400020, "VI_LEAP_REG__VI_H_SYNC_LEAP_REG"),
    (0xA4400024, "VI_H_START_REG__VI_H_VIDEO_REG"),
    (0xA4400028, "VI_V_START_REG__VI_V_VIDEO_REG"),
    (0xA440002C, "VI_V_BURST_REG"),
    (0xA4400030, "VI_X_SCALE_REG"),
    (0xA4400034, "VI_Y_SCALE_REG"),
    (0xA4500000, "AI_DRAM_ADDR_REG"),
    (0xA4500004, "AI_LEN_REG"),
    (0xA4500008, "AI_CONTROL_REG"),
    (0xA450000C, "AI_STATUS_REG"),
    (0xA4500010, "AI_DACRATE_REG"),
    (0xA4500014, "AI_BITRATE_REG"),
    (0xA4600000, "PI_DRAM_ADDR_REG"),
    (0xA4600004, "PI_CART_ADDR_REG"),
    (0xA4600008, "PI_RD_LEN_REG"),
    (0xA460000C, "PI_WR_LEN_REG"),
    (0xA4600010, "PI_STATUS_REG"),
    (0xA4600014, "PI_BSD_DOM1_LAT_REG"),
    (0xA4600018, "PI_BSD_DOM1_PWD_REG"),
    (0xA460001C, "PI_BSD_DOM1_PGS_REG"),
    (0xA4600020, "PI_BSD_DOM1_RLS_REG"),
    (0xA4600024, "PI_BSD_DOM2_LAT_REG"),
    (0xA4600028, "PI_BSD_DOM2_PWD_REG"),
    (0xA460002C, "PI_BSD_DOM2_PGS_REG"),
    (0xA4600030, "PI_BSD_DOM2_RLS_REG"),
    (0xA4700000, "RI_MODE_REG"),
    (0xA4700004, "RI_CONFIG_REG"),
    (0xA4700008, "RI_CURRENT_LOAD_REG"),
    (0xA470000C, "RI_SELECT_REG"),
    (0xA4700010, "RI_REFRESH_REG__RI_COUNT_REG"),
    (0xA4700014, "RI_LATENCY_REG"),
    (0xA4700018, "RI_RERROR_REG"),
    (0xA470001C, "RI_WERROR_REG"),
    (0xA4800000, "SI_DRAM_ADDR_REG"),
    (0xA4800004, "SI_PIF_ADDR_RD64B_REG"),
    (0xA4800010, "SI_PIF_ADDR_WR64B_REG"),
    (0xA4800018, "SI_STATUS_REG"),
    (0xA5000500, "ASIC_DATA"),
    (0xA5000504, "ASIC_MISC_REG"),
    (0xA5000508, "ASIC_STATUS"),
    (0xA500050C, "ASIC_CUR_TK"),
    (0xA5000510, "ASIC_BM_STATUS"),
    (0xA5000514, "ASIC_ERR_SECTOR"),
    (0xA5000518, "ASIC_SEQ_STATUS"),
    (0xA500051C, "ASIC_CUR_SECTOR"),
    (0xA5000520, "ASIC_HARD_RESET"),
    (0xA5000524, "ASIC_C1_S0"),
    (0xA5000528, "ASIC_HOST_SECBYTE"),
    (0xA500052C, "ASIC_C1_S2"),
    (0xA5000530, "ASIC_SEC_BYTE"),
    (0xA5000534, "ASIC_C1_S4"),
    (0xA5000538, "ASIC_C1_S6"),
    (0xA500053C, "ASIC_CUR_ADDR"),
    (0xA5000540, "ASIC_ID_REG"),
    (0xA5000544, "ASIC_TEST_REG"),
    (0xA5000548, "ASIC_TEST_PIN_SEL"),
];
